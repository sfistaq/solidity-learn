/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC20MockToken,
  ERC20MockTokenInterface,
} from "../../../contracts/mock/ERC20MockToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280601081526020017f4552433230204d6f636b20546f6b656e000000000000000000000000000000008152506040518060400160405280600481526020017f4d4f434b00000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620001a6565b508060049080519060200190620000af929190620001a6565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620002bb565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001b49062000256565b90600052602060002090601f016020900481019282620001d8576000855562000224565b82601f10620001f357805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022357825182559160200191906001019062000206565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b600060028204905060018216806200026f57607f821691505b602082108114156200028657620002856200028c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61180780620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610276578063a9059cbb146102a6578063dd62ed3e146102d6578063f2fde38b14610306576100f5565b806370a0823114610200578063715018a6146102305780638da5cb5b1461023a57806395d89b4114610258576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610322565b60405161010f91906111cc565b60405180910390f35b610132600480360381019061012d9190610f87565b6103b4565b60405161013f91906111b1565b60405180910390f35b6101506103d7565b60405161015d919061132e565b60405180910390f35b610180600480360381019061017b9190610f38565b6103e1565b60405161018d91906111b1565b60405180910390f35b61019e610410565b6040516101ab9190611349565b60405180910390f35b6101ce60048036038101906101c99190610f87565b610419565b6040516101db91906111b1565b60405180910390f35b6101fe60048036038101906101f99190610f87565b610450565b005b61021a60048036038101906102159190610ed3565b61045e565b604051610227919061132e565b60405180910390f35b6102386104a6565b005b6102426104ba565b60405161024f9190611196565b60405180910390f35b6102606104e4565b60405161026d91906111cc565b60405180910390f35b610290600480360381019061028b9190610f87565b610576565b60405161029d91906111b1565b60405180910390f35b6102c060048036038101906102bb9190610f87565b6105ed565b6040516102cd91906111b1565b60405180910390f35b6102f060048036038101906102eb9190610efc565b610610565b6040516102fd919061132e565b60405180910390f35b610320600480360381019061031b9190610ed3565b610697565b005b6060600380546103319061145e565b80601f016020809104026020016040519081016040528092919081815260200182805461035d9061145e565b80156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050905090565b6000806103bf61071b565b90506103cc818585610723565b600191505092915050565b6000600254905090565b6000806103ec61071b565b90506103f98582856108ee565b61040485858561097a565b60019150509392505050565b60006012905090565b60008061042461071b565b90506104458185856104368589610610565b6104409190611380565b610723565b600191505092915050565b61045a8282610bfb565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104ae610d5b565b6104b86000610dd9565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546104f39061145e565b80601f016020809104026020016040519081016040528092919081815260200182805461051f9061145e565b801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b5050505050905090565b60008061058161071b565b9050600061058f8286610610565b9050838110156105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb906112ee565b60405180910390fd5b6105e18286868403610723565b60019250505092915050565b6000806105f861071b565b905061060581858561097a565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61069f610d5b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561070f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107069061120e565b60405180910390fd5b61071881610dd9565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078a906112ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa9061122e565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e1919061132e565b60405180910390a3505050565b60006108fa8484610610565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109745781811015610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095d9061124e565b60405180910390fd5b6109738484848403610723565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e1906112ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a51906111ee565b60405180910390fd5b610a65838383610e9f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae29061126e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b7e9190611380565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610be2919061132e565b60405180910390a3610bf5848484610ea4565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c629061130e565b60405180910390fd5b610c7760008383610e9f565b8060026000828254610c899190611380565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cde9190611380565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d43919061132e565b60405180910390a3610d5760008383610ea4565b5050565b610d6361071b565b73ffffffffffffffffffffffffffffffffffffffff16610d816104ba565b73ffffffffffffffffffffffffffffffffffffffff1614610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce9061128e565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081359050610eb8816117a3565b92915050565b600081359050610ecd816117ba565b92915050565b600060208284031215610ee557600080fd5b6000610ef384828501610ea9565b91505092915050565b60008060408385031215610f0f57600080fd5b6000610f1d85828601610ea9565b9250506020610f2e85828601610ea9565b9150509250929050565b600080600060608486031215610f4d57600080fd5b6000610f5b86828701610ea9565b9350506020610f6c86828701610ea9565b9250506040610f7d86828701610ebe565b9150509250925092565b60008060408385031215610f9a57600080fd5b6000610fa885828601610ea9565b9250506020610fb985828601610ebe565b9150509250929050565b610fcc816113d6565b82525050565b610fdb816113e8565b82525050565b6000610fec82611364565b610ff6818561136f565b935061100681856020860161142b565b61100f816114ee565b840191505092915050565b600061102760238361136f565b9150611032826114ff565b604082019050919050565b600061104a60268361136f565b91506110558261154e565b604082019050919050565b600061106d60228361136f565b91506110788261159d565b604082019050919050565b6000611090601d8361136f565b915061109b826115ec565b602082019050919050565b60006110b360268361136f565b91506110be82611615565b604082019050919050565b60006110d660208361136f565b91506110e182611664565b602082019050919050565b60006110f960258361136f565b91506111048261168d565b604082019050919050565b600061111c60248361136f565b9150611127826116dc565b604082019050919050565b600061113f60258361136f565b915061114a8261172b565b604082019050919050565b6000611162601f8361136f565b915061116d8261177a565b602082019050919050565b61118181611414565b82525050565b6111908161141e565b82525050565b60006020820190506111ab6000830184610fc3565b92915050565b60006020820190506111c66000830184610fd2565b92915050565b600060208201905081810360008301526111e68184610fe1565b905092915050565b600060208201905081810360008301526112078161101a565b9050919050565b600060208201905081810360008301526112278161103d565b9050919050565b6000602082019050818103600083015261124781611060565b9050919050565b6000602082019050818103600083015261126781611083565b9050919050565b60006020820190508181036000830152611287816110a6565b9050919050565b600060208201905081810360008301526112a7816110c9565b9050919050565b600060208201905081810360008301526112c7816110ec565b9050919050565b600060208201905081810360008301526112e78161110f565b9050919050565b6000602082019050818103600083015261130781611132565b9050919050565b6000602082019050818103600083015261132781611155565b9050919050565b60006020820190506113436000830184611178565b92915050565b600060208201905061135e6000830184611187565b92915050565b600081519050919050565b600082825260208201905092915050565b600061138b82611414565b915061139683611414565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113cb576113ca611490565b5b828201905092915050565b60006113e1826113f4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561144957808201518184015260208101905061142e565b83811115611458576000848401525b50505050565b6000600282049050600182168061147657607f821691505b6020821081141561148a576114896114bf565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6117ac816113d6565b81146117b757600080fd5b50565b6117c381611414565b81146117ce57600080fd5b5056fea264697066735822122054dd9efff58ef5b71a3d19d76a0ea9f39a5f729f1bffee8a199919a30ed8809564736f6c63430008040033";

type ERC20MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20MockToken__factory extends ContractFactory {
  constructor(...args: ERC20MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20MockToken> {
    return super.deploy(overrides || {}) as Promise<ERC20MockToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20MockToken {
    return super.attach(address) as ERC20MockToken;
  }
  override connect(signer: Signer): ERC20MockToken__factory {
    return super.connect(signer) as ERC20MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockTokenInterface {
    return new utils.Interface(_abi) as ERC20MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20MockToken {
    return new Contract(address, _abi, signerOrProvider) as ERC20MockToken;
  }
}
