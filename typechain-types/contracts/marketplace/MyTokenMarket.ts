/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MyTokenMarketInterface extends utils.Interface {
  functions: {
    "buyTokens(uint256)": FunctionFragment;
    "changeFeePercentage(uint256)": FunctionFragment;
    "changeOfferExpirationDate(uint256,uint256)": FunctionFragment;
    "changeOfferPrice(uint256,uint256)": FunctionFragment;
    "createOffer(address,uint256,uint256,uint256)": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "feePercentage()": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "offersCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "toggleOfferIsActive(uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTokens"
      | "changeFeePercentage"
      | "changeOfferExpirationDate"
      | "changeOfferPrice"
      | "createOffer"
      | "feeAccount"
      | "feePercentage"
      | "offers"
      | "offersCount"
      | "owner"
      | "renounceOwnership"
      | "toggleOfferIsActive"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOfferExpirationDate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOfferPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offersCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleOfferIsActive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOfferExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOfferPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleOfferIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChangeFeePercentage(address,uint256)": EventFragment;
    "ChangeOfferExpirationDate(uint256,address,uint256)": EventFragment;
    "ChangeOfferPrice(uint256,address,uint256)": EventFragment;
    "CreateOffer(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PurchaseTokens(uint256,address,uint256,uint256)": EventFragment;
    "ToggleOffer(uint256,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeFeePercentage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeOfferExpirationDate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeOfferPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggleOffer"): EventFragment;
}

export interface ChangeFeePercentageEventObject {
  caller: string;
  feePercentage: BigNumber;
}
export type ChangeFeePercentageEvent = TypedEvent<
  [string, BigNumber],
  ChangeFeePercentageEventObject
>;

export type ChangeFeePercentageEventFilter =
  TypedEventFilter<ChangeFeePercentageEvent>;

export interface ChangeOfferExpirationDateEventObject {
  offerID: BigNumber;
  caller: string;
  expirationDate: BigNumber;
}
export type ChangeOfferExpirationDateEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ChangeOfferExpirationDateEventObject
>;

export type ChangeOfferExpirationDateEventFilter =
  TypedEventFilter<ChangeOfferExpirationDateEvent>;

export interface ChangeOfferPriceEventObject {
  offerID: BigNumber;
  caller: string;
  price: BigNumber;
}
export type ChangeOfferPriceEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ChangeOfferPriceEventObject
>;

export type ChangeOfferPriceEventFilter =
  TypedEventFilter<ChangeOfferPriceEvent>;

export interface CreateOfferEventObject {
  offerID: BigNumber;
  seller: string;
  token: string;
  amount: BigNumber;
  price: BigNumber;
  expirationDate: BigNumber;
}
export type CreateOfferEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  CreateOfferEventObject
>;

export type CreateOfferEventFilter = TypedEventFilter<CreateOfferEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PurchaseTokensEventObject {
  offerID: BigNumber;
  buyer: string;
  amount: BigNumber;
  paidAmount: BigNumber;
}
export type PurchaseTokensEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PurchaseTokensEventObject
>;

export type PurchaseTokensEventFilter = TypedEventFilter<PurchaseTokensEvent>;

export interface ToggleOfferEventObject {
  offerID: BigNumber;
  caller: string;
  isActive: boolean;
}
export type ToggleOfferEvent = TypedEvent<
  [BigNumber, string, boolean],
  ToggleOfferEventObject
>;

export type ToggleOfferEventFilter = TypedEventFilter<ToggleOfferEvent>;

export interface MyTokenMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MyTokenMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTokens(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFeePercentage(
      _newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOfferExpirationDate(
      _ID: PromiseOrValue<BigNumberish>,
      _newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOfferPrice(
      _ID: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    feePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        offerID: BigNumber;
        seller: string;
        token: string;
        amount: BigNumber;
        price: BigNumber;
        expirationDate: BigNumber;
        isActive: boolean;
      }
    >;

    offersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleOfferIsActive(
      _ID: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyTokens(
    _ID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFeePercentage(
    _newFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOfferExpirationDate(
    _ID: PromiseOrValue<BigNumberish>,
    _newExpirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOfferPrice(
    _ID: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _expirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  offers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      offerID: BigNumber;
      seller: string;
      token: string;
      amount: BigNumber;
      price: BigNumber;
      expirationDate: BigNumber;
      isActive: boolean;
    }
  >;

  offersCount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleOfferIsActive(
    _ID: PromiseOrValue<BigNumberish>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTokens(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeePercentage(
      _newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOfferExpirationDate(
      _ID: PromiseOrValue<BigNumberish>,
      _newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOfferPrice(
      _ID: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        offerID: BigNumber;
        seller: string;
        token: string;
        amount: BigNumber;
        price: BigNumber;
        expirationDate: BigNumber;
        isActive: boolean;
      }
    >;

    offersCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    toggleOfferIsActive(
      _ID: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeFeePercentage(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      feePercentage?: null
    ): ChangeFeePercentageEventFilter;
    ChangeFeePercentage(
      caller?: PromiseOrValue<string> | null,
      feePercentage?: null
    ): ChangeFeePercentageEventFilter;

    "ChangeOfferExpirationDate(uint256,address,uint256)"(
      offerID?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      expirationDate?: null
    ): ChangeOfferExpirationDateEventFilter;
    ChangeOfferExpirationDate(
      offerID?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      expirationDate?: null
    ): ChangeOfferExpirationDateEventFilter;

    "ChangeOfferPrice(uint256,address,uint256)"(
      offerID?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      price?: null
    ): ChangeOfferPriceEventFilter;
    ChangeOfferPrice(
      offerID?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      price?: null
    ): ChangeOfferPriceEventFilter;

    "CreateOffer(uint256,address,address,uint256,uint256,uint256)"(
      offerID?: null,
      seller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      price?: null,
      expirationDate?: null
    ): CreateOfferEventFilter;
    CreateOffer(
      offerID?: null,
      seller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      price?: null,
      expirationDate?: null
    ): CreateOfferEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PurchaseTokens(uint256,address,uint256,uint256)"(
      offerID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      paidAmount?: null
    ): PurchaseTokensEventFilter;
    PurchaseTokens(
      offerID?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      paidAmount?: null
    ): PurchaseTokensEventFilter;

    "ToggleOffer(uint256,address,bool)"(
      offerID?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      isActive?: null
    ): ToggleOfferEventFilter;
    ToggleOffer(
      offerID?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      isActive?: null
    ): ToggleOfferEventFilter;
  };

  estimateGas: {
    buyTokens(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFeePercentage(
      _newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOfferExpirationDate(
      _ID: PromiseOrValue<BigNumberish>,
      _newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOfferPrice(
      _ID: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleOfferIsActive(
      _ID: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokens(
      _ID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFeePercentage(
      _newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOfferExpirationDate(
      _ID: PromiseOrValue<BigNumberish>,
      _newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOfferPrice(
      _ID: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleOfferIsActive(
      _ID: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
